# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger: none

pool:
  name: PoolRunners

variables:
  IMAGE_NAME: 'nestjs-baseapp'

stages:

# Stage 1: Install Node.js and Dependencies
- stage: Install
  displayName: 'Install Stage'
  jobs:
  - job: Install
    displayName: 'Install Node.js and Dependencies'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        path: $(Build.SourcesDirectory)/node_modules
        cacheHitVar: CACHE_RESTORED
      displayName: 'Cache node_modules'

    - script: |
        npm ci
      displayName: 'Install dependencies'

# Stage 2: Lint and Test
- stage: LintAndTest
  displayName: 'Lint and Test Stage'
  dependsOn: Install
  jobs:
  - job: LintAndTest
    displayName: 'Lint and Run Tests'
    steps:
    - script: |
        npm ci
      displayName: 'Install dependencies'

    - script: |
        npm run format
      displayName: 'Format code'

    - script: |
        npm run lint
      displayName: 'Lint code'

    - script: |
        npm run test
      displayName: 'Run unit tests'

    - script: |
        npm run test:cov
      displayName: 'Run test coverage'

    - script: |
        npm run test:e2e
      displayName: 'Run end-to-end tests'

    - script: |
        npm audit --audit-level=high --production || exit 0
      displayName: 'Run security audit'

# Stage 3: Build Project
- stage: Build
  displayName: 'Build Stage'
  dependsOn: LintAndTest
  jobs:
  - job: Build
    displayName: 'Build and Publish Artifacts'
    steps:
    - script: |
        npm ci
      displayName: 'Install dependencies'
      
    - script: |
        npm run build
        mkdir -p $(Build.ArtifactStagingDirectory)
        cp -R dist/* $(Build.ArtifactStagingDirectory)/
      displayName: 'Build and prepare artifacts'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: 'drop'
      displayName: 'Publish build artifacts'

# Stage 4: Docker Build
- stage: Docker
  displayName: 'Docker Build Stage'
  dependsOn: Build
  jobs:
  - job: DockerBuild
    displayName: 'Build Docker Image'
    steps:
    - script: |
        docker build -t $(IMAGE_NAME) .
      displayName: 'Build Docker image locally'


